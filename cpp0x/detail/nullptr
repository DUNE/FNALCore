#ifndef CPP0X_NULLPTR
#define CPP0X_NULLPTR

// ======================================================================
//
// __nullptr: provide __nullptr workaround
//
// ----------------------------------------------------------------------
//
// This file is an edited excerpt of libcxx/include/cstddef, a part of
//                     The LLVM Compiler Infrastructure
// which is "dual licensed under the MIT and the _Upniversity of Illinois
// Open Source Licenses".  For details, see
//   http://llvm.org/svn/llvm-project/llvm/trunk/LICENSE.TXT.txt
//
// ======================================================================

namespace std {
  struct __nullptr_t;

  __nullptr_t  __get_nullptr_t( );
}

#define nullptr ::std::__get_nullptr_t()

// ----------------------------------------------------------------------

struct std::__nullptr_t
{
  void * _;
  struct __nat { int _; };

  __nullptr_t( int __nat::* )  { }

  operator int __nat::* ( ) const  { return 0; }

  template< class _Tp >
    operator _Tp* ( ) const  { return 0; }

  template< class _Tp, class _Up >
    operator _Tp _Up::* ( ) const  { return 0; }

  friend  bool  operator == ( __nullptr_t, __nullptr_t )  { return true;  }
  friend  bool  operator != ( __nullptr_t, __nullptr_t )  { return false; }
  friend  bool  operator <  ( __nullptr_t, __nullptr_t )  { return false; }
  friend  bool  operator <= ( __nullptr_t, __nullptr_t )  { return true;  }
  friend  bool  operator >  ( __nullptr_t, __nullptr_t )  { return false; }
  friend  bool  operator >= ( __nullptr_t, __nullptr_t )  { return true;  }

  template< class _Tp >
    friend  bool  operator == ( __nullptr_t, _Tp * p )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator != ( __nullptr_t, _Tp * p )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator <  ( __nullptr_t, _Tp * p )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator <= ( __nullptr_t, _Tp * p )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator >  ( __nullptr_t, _Tp * p )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator >= ( __nullptr_t, _Tp * p )  { return p == 0;  }

  template< class _Tp >
    friend  bool  operator == ( _Tp * p, __nullptr_t )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator != ( _Tp * p, __nullptr_t )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator <  ( _Tp * p, __nullptr_t )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator <= ( _Tp * p, __nullptr_t )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator >  ( _Tp * p, __nullptr_t )  { return p == 0;  }
  template< class _Tp >
    friend  bool  operator >= ( _Tp * p, __nullptr_t )  { return p == 0;  }

  template< class _Tp, class _Up >
    friend  bool  operator == ( __nullptr_t, _Tp _Up::* p )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator != ( __nullptr_t, _Tp _Up::* p )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator <  ( __nullptr_t, _Tp _Up::* p )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator <= ( __nullptr_t, _Tp _Up::* p )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator >  ( __nullptr_t, _Tp _Up::* p )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator >= ( __nullptr_t, _Tp _Up::* p )  { return p == 0;  }

  template< class _Tp, class _Up >
    friend  bool  operator == ( _Tp _Up::* p, __nullptr_t )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator != ( _Tp _Up::* p, __nullptr_t )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator <  ( _Tp _Up::* p, __nullptr_t )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator <= ( _Tp _Up::* p, __nullptr_t )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator >  ( _Tp _Up::* p, __nullptr_t )  { return p == 0;  }
  template< class _Tp, class _Up >
    friend  bool  operator >= ( _Tp _Up::* p, __nullptr_t )  { return p == 0;  }

};  // __nullptr_t

inline std::__nullptr_t
  std::__get_nullptr_t( )  { return std::__nullptr_t(0); }

#endif

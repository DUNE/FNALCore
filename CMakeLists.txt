# - FNALCore top level build
# Project setup
# Require 2.8.11 to get the nice interface export features
cmake_minimum_required(VERSION 2.8.11)
project(FNALCore)

#-----------------------------------------------------------------------
# API and ABI versioning
# NB - this only demonstrates that it *can* be done
# More info on this at:
# - http://public.kitware.com/Bug/view.php?id=4383
# - http://techbase.kde.org/Policies/Binary_Compatibility_Issues_With_C++
#
# The following numbers are *arbitrary* for now. Remember that
# VERSION and SOVERSION do not neccessarily evolve in sync
# - Hard code version plus Major/Minor/Patch for now
set(FNALCore_VERSION "1.0.0")
set(FNALCore_VERSION_MAJOR 1)
set(FNALCore_VERSION_MINOR 0)
set(FNALCore_VERSION_PATCH 0)

set(FNALCore_SOVERSION "1.0.0")

# - We can also use a postfix to distinguish the debug lib from
# others if different build modes are ABI incompatible (can be
# extended to other modes)
set(FNALCore_DEBUG_POSTFIX "d")

#-----------------------------------------------------------------------
# Standard and Custom CMake Modules
#
list(INSERT CMAKE_MODULE_PATH 0
  ${CMAKE_CURRENT_LIST_DIR}/cmake
  ${CMAKE_CURRENT_LIST_DIR}/cmake/CheckCXX11Features/Modules
  )

# - Standard Support
include(CMakePackageConfigHelpers)
include(GNUInstallDirs)
include(CheckCXXCompilerFlag)

# - C++11 Check/Configuration
# To be added: list of C++11 features which *must* be present.
include(CheckCXX11Features)
include(CheckCXXStandardLibrary)

# Use of emplace methods in stdlib now requires that (at least)
# map support this. NEED A CHECK HERE.
# It appears these are in GCC 4.8, but not 4.7. May not want to
# support latter, but should still supply a check!!

# In CMake 2.8.12 and higher, these can be propagated to clients via the
# target_compile_options command
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX11_COMPILER_FLAGS}")

#-----------------------------------------------------------------------
# Required Third Party
#
set(Boost_USE_MULTITHREADED ON)
set(FNALCore_BOOST_COMPONENTS filesystem system regex thread)
find_package(Boost 1.42.0 REQUIRED ${FNALCore_BOOST_COMPONENTS})

#-----------------------------------------------------------------------
# Testing
option(FNALCore_ENABLE_TESTING "Enable Unit Testing of FNALCore" OFF)
if(FNALCore_ENABLE_TESTING)
  enable_testing()
  set(BOOST_NO_SYSTEM_PATHS ON)
  find_package(Boost ${BOOST_VERSION} REQUIRED unit_test_framework)
  include(CetTest)
endif()

#-----------------------------------------------------------------------
# Build
add_subdirectory(FNALCore)

#-----------------------------------------------------------------------
# Documentation
option(FNALCore_BUILD_DOCS "Build documentation for FNALCore" ON)
if(FNALCore_BUILD_DOCS)
  add_subdirectory(doc)
endif()

#-----------------------------------------------------------------------
# Install support files
#
configure_package_config_file(
  cmake/FNALCoreConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/FNALCoreConfig.cmake
  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/FNALCore-${FNALCore_VERSION}
  PATH_VARS
    CMAKE_INSTALL_INCLUDEDIR
    CMAKE_INSTALL_LIBDIR
  )

write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/FNALCoreConfigVersion.cmake
  VERSION ${FNALCore_VERSION}
  COMPATIBILITY AnyNewerVersion
  )

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/FNALCoreConfig.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/FNALCoreConfigVersion.cmake
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/FNALCore-${FNALCore_VERSION}
  )

#-----------------------------------------------------------------------
# Package
#
include(FNALCoreCPack)


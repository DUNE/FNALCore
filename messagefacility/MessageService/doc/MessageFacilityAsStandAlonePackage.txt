========================================
 Purpose
========================================

The purpose is to separate the Message Logger as a stand-alone library and be independent of CMS software package. The first user would be NOvA DAQ project.


========================================
 Related Packages
========================================

Basic package for message logger is

Message Logger       push messages to the queue
MessageService      consume messages from the queue and re-route to multiple destinations
ParameterSet        supporting library providing the data-structure for MessageLogger configuration
Utilities           supporting library for algorithms, tools, etc.


========================================
 Namespace
========================================

mf (Message Facility) will be used instead of edm (enhanced data module) for the stand-alone message logger.


========================================
 Service Start-up
========================================


========================================
 Extensions to the Message Facility
========================================


========================================
 Remote Destination
========================================


========================================
 Archive Destination
========================================


========================================
 Remote Message Server
========================================


========================================
 New ParameterSet Object
========================================


========================================
 Configuration Language
========================================

Based on JSON (JavaScript Object Notation)

========================================
 Configuring the Message Facility
========================================

There has been big changes in configuring the Message Facility. The philosophy of the new configuring method is to use one single ParameterSet object for one destination. In other words, the ParameterSet object passed in for the configuration of a destination should be the only source that can affect the behavior of that destination. This is to eliminate the dependencies of configuring a destination from multiple sources, mostly from the "defaults". It suppresses possible glitches about changing the configuration file somewhere outside of a destination segament might still affect the behavior of that destination.

In the previous configuration model, for a specific destination, the value of a certain parameter, e.g., "limit", may come from following source:

1. Hardwired defaults in MessageLoggerDefaults.cc
2. Defaults common to the job
3. Defaults common to the destination
4. The actual parameter

With the new configuratuion model, source 2, and 3 have been suppressed. It means, the configuring ParameterSet object for each destination will be required to carry a parameter list as complete as possible. If a parameter still cannot be found in the ParameterSet object, the configuration code will go look for a hardwired default directly.

The model is a great simplicity comparing with the previous model, especially when looking for default values. Another great advantage is that, most of the parameters now have very limited places that allows to appear. Usually they can only appear at one certain level in a configuration file.

For example, in the old configuring model "limit : 10" may appear in a top-level "default" ParameterSet object, or in a "default" ParameterSet object inside of a destination, or in a "category" object, or in a "severity" object. This layout of multiple sources for a single parameter brings great confusion in both writing a configuration file, and in processing the configuration file. Under the new model, the only allowed place for the parameter "limit" to appear is inside of a "category" object, which is inside of a destination object.

Other improvements include, simplify the meaning of a destination name. In the old model, a destination name has multiple folds of meanings. First, the name (or part of the name) serves as the type of the destination, e.g., "cout" and "cerr" have the special meaning of logging messages to standard output or standard error. Second, the name also serves as the output filename if the destination is a file. Third, these names are also references to look up for detailed configurations in configuring the MessageFacility. The multi-purpose of the destination name might cause some unwanted behavior in either writing or parsing the configuration file. To amend these, in the new model the destination name is now merely a name for a destination, which might represent the literal purpose of this destination, or just an id. All other meanings of the destinations names now go into the destination ParameterSet as individual parameters, such as the "type" parameter and "filename" parameter.

Following is the deatiled rule for the new configuring model,

1. Everything that is related with MessageFacility configuration must be wrapped in a single ParameterSet object with the name "MessageFacility".

2. The "MessageFacility" ParameterSet object contains a series of top-level parameters. These parameters can be chosen from:

  2.1 "debugModels", a vector of string listing the name of debug enabled models. Or use "*" to enable debug messages in all modules
  2.2 "suppressDebug", a vector of string
  2.3 "suppressInfo", a vector of string
  2.4 "suppressWarning", a vector of string
  2.5 "destiations", a ParameterSet object containing the list of all destinations

3. The "destinations" ParameterSet object is a combination of ParameterSet objects for individual destinations. There are two types of destinations that you can insert in the "destinations" ParameterSet object,

  3.1 ordinary destinations, including cout, cerr, file, or destinations provided in the Extension package. These destinations are places to store/display the actual issues messages. Each of the ordinary destinations is represented as a named ParameterSet object in "destinations"
  3.2 statistic destinations, which store/display the outputs of statistics (of messages been issued) when the function mf::LogStatistics() is called. All statistics destinations (represented by ParameterSet objects) are stored in a big ParameterSet objct called "statistics", which is a paramter inside of "destinations"

4. Each of the destination ParameterSet objects has a series of parameters that allows you to customized the behavior of that specific destination. These parameters are:

  4.1 "type", a string indicating the type of the destination, which can be chosen from "cout", "cerr", "file", or any string defined in the Extension package ("DDS" and "archive" for the moment)
  4.2 "filename", a string indicating the name of output file. Only applicable for destinations of the type "file" (or "archive")
  4.3 "threshold", a string with possible values of "DEBUG", "INFO", "WARNING", and "ERROR" to set the severity filtering for that destination
  4.4 "noTimeStamps", a parameter taking a boolean value to suppress (when set to true), or enable (set to false, this is the default value) the timestamps in logged messages for this destination
  4.5 "useMilliseconds", a boolean value indicating if the milliseconds in the timestamp is wanted (true) or not (false, this is the default value). Applicable only when "noTimeStamps" is set to false
  4.6 "noLineBreaks", a boolean value tells the Logger to turn on (set to false, this is the default value) or off (set to true) the break of lines when the line length limit is reached
  4.7 "lineLength", a interger value indicating the length limit of each line (80 characters by default). Applicable only when "noLineBreaks" is set to false
  4.8 "outputStatistics", indicating if one wants to append/insert statistic outputs to the same destination (set to true), or not (set to false, this is the default value), with exactly the same configuration
  4.9 "resetStatistics",  a boolean value tells the logger to reset (set to true) the statistics everytime a LogStatistics() is issued, or not (set to false, this is the default value). Applicable only when "outputStatistics" is set to true
  4.10 "categories", a ParameterSet object containing the configuration for each listed categories for this destination.

5. The "categories" ParameterSet object includes a list of predefined message categories that might appear during the run, or specificly those message categories that the user wants to specially customize for the destination

  5.1 The scope. the "categories" ParameterSet object only customized the behavior of messages under these categories that are logged specificly to this destination. Messages that are routed to other destinations will not be affected
  5.2 The "categories" ParameterSet object may have one or more ParameterSet objects with their names indicating the category name
  5.3 A special name "default" is reserved for a ParameterSet object that controls the filtering of messages when a message category is not listed in the "categories" object

6. Each of the category ParameterSet object is used to customize the message filtering in that category for the specific destination. It can have three possible parameters:

  6.1 "limit", an integer value set the occurance limit of repeating message (in the same categories) in a given timespan.
  6.2 "reportEvery", an integer value
  6.3 "timespan", an integer value in seconds

7. A configuration file written under the new configuring model would look like the following,

  MessageFacility :
  {
      debugModules : ["*"],
      destinations :
      {
          detailedInfo :
          {
              type : "file",
              filename : "detailedInfo.txt",
              threshold : "DEBUG",
              noTimeStamps : false,
              useMilleseconds : true,
              outputStatistics : true,
              resetStatistics: true,
              categories :
              {
                  unimportant : { limit : 5 },
                  serious_matter : { limit : 200 },
                  default : { limit : 100 }
              }
          },

          console_output :
          {
              type : "cout"
          },

          statistics :
          {
              runctrl_stat :
              {
                  type : "file",
                  filename : "InfoStat.log",
                  threshold : "INFO",
                  categories :
                  {
                      runctrol : { limit : -1 },
                      default : { limit : 0 }
                  }
              }
          } // statistics
      } // destinations
  }













